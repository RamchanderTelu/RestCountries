// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RunPath.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("RestCountriesSearch", Description="\tIn order to validation rest countires api, need to test by searching countries", SourceFile="Features\\RestCountriesSearch.feature", SourceLine=0)]
    public partial class RestCountriesSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RestCountriesSearch.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RestCountriesSearch", "\tIn order to validation rest countires api, need to test by searching countries", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I have the Rest countries service is up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to see all the countries", new string[] {
                "SearchAll"}, SourceLine=7)]
        public virtual void AbleToSeeAllTheCountries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to see all the countries", null, new string[] {
                        "SearchAll"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 9
 testRunner.When("I request for all countries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("All the countries and their details  returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AbleToSearchForACountryByName(string countryName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SearchByCountry"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to search for a country by Name", null, @__tags);
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 15
 testRunner.When(string.Format("I request for a country {0}", countryName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then(string.Format("All countries with name {0} details in response", countryName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a country by Name, India", new string[] {
                "SearchByCountry"}, SourceLine=18)]
        public virtual void AbleToSearchForACountryByName_India()
        {
#line 14
this.AbleToSearchForACountryByName("India", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a country by Name, Ukraine", new string[] {
                "SearchByCountry"}, SourceLine=18)]
        public virtual void AbleToSearchForACountryByName_Ukraine()
        {
#line 14
this.AbleToSearchForACountryByName("Ukraine", ((string[])(null)));
#line hidden
        }
        
        public virtual void AbleToSearchForACountryByIncorrectName(string countryName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SearchByIncorrectCountry"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to search for a country by incorrect Name", null, @__tags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 24
 testRunner.When(string.Format("I request for a incorrect country {0}", countryName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then(string.Format("No country with name {0} details in response", countryName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a country by incorrect Name, London", new string[] {
                "SearchByIncorrectCountry"}, SourceLine=27)]
        public virtual void AbleToSearchForACountryByIncorrectName_London()
        {
#line 23
this.AbleToSearchForACountryByIncorrectName("London", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a country by incorrect Name, Paris", new string[] {
                "SearchByIncorrectCountry"}, SourceLine=27)]
        public virtual void AbleToSearchForACountryByIncorrectName_Paris()
        {
#line 23
this.AbleToSearchForACountryByIncorrectName("Paris", ((string[])(null)));
#line hidden
        }
        
        public virtual void AbleToSearchForACaptialCityByName(string capitalCity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SearchByCity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to search for a Captial City by Name", null, @__tags);
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 33
 testRunner.When(string.Format("I request for a capital city {0}", capitalCity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("All countries with capital city {0} details in response", capitalCity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a Captial City by Name, London", new string[] {
                "SearchByCity"}, SourceLine=36)]
        public virtual void AbleToSearchForACaptialCityByName_London()
        {
#line 32
this.AbleToSearchForACaptialCityByName("London", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Able to search for a Captial City by Name, Paris", new string[] {
                "SearchByCity"}, SourceLine=36)]
        public virtual void AbleToSearchForACaptialCityByName_Paris()
        {
#line 32
this.AbleToSearchForACaptialCityByName("Paris", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
